package com.coforge.training.agribid.farmer.service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.coforge.training.agribid.farmer.exception.ResourceNotFound;
import com.coforge.training.agribid.farmer.model.Crop;
import com.coforge.training.agribid.farmer.model.DemoCrop;
import com.coforge.training.agribid.farmer.model.DemoCrop1;
import com.coforge.training.agribid.farmer.model.Farmer;
import com.coforge.training.agribid.farmer.repository.CropRepository;
import com.coforge.training.agribid.farmer.repository.RegistrationRepository;




@Service
public class CropService {

	@Autowired
	private CropRepository cRepo;

	//	    @Autowired
	//	    private CropClient cClient;

	@Autowired
	private RegistrationRepository rRepo;

	public List<DemoCrop1> findCropsByFarmerId1(long id) {
		return cRepo.findCropsByFarmerId1(id).stream()
				.map(crop -> new DemoCrop1(crop.getCropName(), crop.getBasePrice(),crop.getCurrentBid(),crop.getPostedDateTime(),crop.getQuantity()))
				.collect(Collectors.toList());
	}

	public List<DemoCrop> getCropsByFarmerId(long id) {
		return cRepo.findByFarmerId(id).stream()
				.map(crop -> new DemoCrop(id, crop.getCropType(), crop.getCropName(), crop.getCurrentBid(), crop.getBasePrice(), crop.getPostedDateTime()))
				.collect(Collectors.toList());
	}



	public List<DemoCrop> getCropsInfo() {
		return cRepo.findAllCrops(); //Invokes Custom Query method
	}


	public List<Crop> getAllCrops() {
		return cRepo.findAll();
	}




	public Optional <Crop> getCropById(Long cid) throws ResourceNotFound {
		return cRepo.findById(cid);

	}

	public Crop saveCrop(Long fId, Crop crop) {
		Farmer farmer = rRepo.findById(fId)
				.orElseThrow(() -> new RuntimeException("Farmer not found"));
		crop.setFarmer(farmer);
		crop.setPostedDateTime(LocalDateTime.now());
		return cRepo.save(crop);
	}



	public Crop updateCurrentBid(Long cid, double currentBid , Long bidderId) throws ResourceNotFound {
		Crop crop = cRepo.findById(cid)
				.orElseThrow(() -> new ResourceNotFound("Crop not found for this id: " + cid));

		crop.setBid(bidderId);
		crop.setCurrentBid(currentBid);
		return cRepo.save(crop);
	}



	public Crop updateCrop(Crop crop) {
		return cRepo.save(crop);
	}





}




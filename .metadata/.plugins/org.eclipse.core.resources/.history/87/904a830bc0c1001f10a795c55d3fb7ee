package com.coforge.training.agribid.farmer.model;


import java.time.LocalDateTime;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import lombok.*;


//@JsonInclude(JsonInclude.Include.NON_NULL)
//@JsonIgnoreProperties(ignoreUnknown = true)
@Entity
@Table
public class Crop {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long cid;
	
	private Long bid;

	@Column(name = "crop_type", nullable = false)
	@NotBlank(message = "Crop type is mandatory")
	private String cropType;

	@Column(name = "base_price", nullable = false)
	@NotNull(message = "Base Price is mandatory")
	private double basePrice;

	@Column(name = "crop_name", nullable = false)
	@NotBlank(message = "Crop name is mandatory")
	private String cropName;


	@Column(name = "quantity", nullable = false)
	@NotNull(message = "Quantity is mandatory")
	@Positive(message = "Quantity must be a positive number")
	private Integer quantity;

	@JsonBackReference
	@ManyToOne  //one-one mapping
	@JoinColumn(name = "f_id") //foreign key field
	private Farmer farmer; //reference class object


	private double currentBid ;


	private LocalDateTime postedDateTime;  
	
	private String status;







	@Lob
	@JsonIgnore
	private byte[] soilPHCertificate;







	public Long getCid() {
		return cid;
	}

	public void setCid(Long cid) {
		this.cid = cid;
	}

	public String getCropType() {
		return cropType;
	}

	public void setCropType(String cropType) {
		this.cropType = cropType;
	}

	public double getBasePrice() {
		return basePrice;
	}

	public void setBasePrice(double basePrice) {
		this.basePrice = basePrice;
	}

	public String getCropName() {
		return cropName;
	}

	public void setCropName(String cropName) {
		this.cropName = cropName;
	}

//	public String getFertilizerType() {
//		return fertilizerType;
//	}
//
//
//	public void setFertilizerType(String fertilizerType) {
//		this.fertilizerType = fertilizerType;
//	}

	public Integer getQuantity() {
		return quantity;
	}

	public void setQuantity(Integer quantity) {
		this.quantity = quantity;
	}

	public Farmer getFarmer() {
		return farmer;
	}

	public void setFarmer(Farmer farmer) {
		this.farmer = farmer;
	}

	public double getCurrentBid() {
		return currentBid;
	}

	public void setCurrentBid(double currentBid) {
		this.currentBid = currentBid;
	}

	public LocalDateTime getPostedDateTime() {
		return postedDateTime;
	}

	public void setPostedDateTime(LocalDateTime postedDateTime) {
		this.postedDateTime = postedDateTime;
	}

	public byte[] getSoilPHCertificate() {
		return soilPHCertificate;
	}

	public void setSoilPHCertificate(byte[] soilPHCertificate) {
		this.soilPHCertificate = soilPHCertificate;
	}
	
	

	public Crop(@NotNull(message = "Base Price is mandatory") double basePrice,
			@NotBlank(message = "Crop name is mandatory") String cropName,
			@NotNull(message = "Quantity is mandatory") @Positive(message = "Quantity must be a positive number") Integer quantity,
			double currentBid, LocalDateTime postedDateTime) {
		super();
		this.basePrice = basePrice;
		this.cropName = cropName;
		this.quantity = quantity;
		this.currentBid = currentBid;
		this.postedDateTime = postedDateTime;
	}



	public Long getBid() {
		return bid;
	}

	public void setBid(Long bid) {
		this.bid = bid;
	}



	public Crop() {
		super();
		// TODO Auto-generated constructor stub
	}	
}
